sqlite3 "/Users/phoebekuek/Desktop/tiktok.db"

-- DROP (safe even if nothing exists)
DROP TABLE IF EXISTS users_master;
DROP TABLE IF EXISTS profiles_catalog;
DROP TABLE IF EXISTS gift_events;

-- Live table read by your dashboard/API
CREATE TABLE users_master (
  viewer_id TEXT PRIMARY KEY,
  display_name TEXT,
  account_created_ts TEXT,
  age_days INTEGER,
  geo_home_country TEXT,
  ip_country TEXT,
  device_hash TEXT,
  kyc_level INTEGER,
  coins_per_transaction INTEGER,
  num_transaction INTEGER,
  avg_session_duration_secs INTEGER,
  preferred_gift_type TEXT,
  cluster_id TEXT,
  profile_type TEXT,
  risk_score REAL,
  risk_label TEXT
);

-- Catalog holds U001 (not in users_master until gift)
CREATE TABLE profiles_catalog (
  viewer_id TEXT PRIMARY KEY,
  display_name TEXT,
  account_created_ts TEXT,
  age_days INTEGER,
  geo_home_country TEXT,
  ip_country TEXT,
  device_hash TEXT,
  kyc_level INTEGER,
  coins_per_transaction INTEGER,
  num_transaction INTEGER,
  avg_session_duration_secs INTEGER,
  preferred_gift_type TEXT,
  cluster_id TEXT,
  profile_type TEXT
);

-- Gift events: your UI inserts one row here on “Send Gift”
CREATE TABLE gift_events (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  viewer_id TEXT NOT NULL,
  gift_type TEXT,
  gift_coins INTEGER,
  created_at TEXT DEFAULT (datetime('now'))
);

-- Helpful indexes
CREATE INDEX IF NOT EXISTS idx_users_device_hash ON users_master(device_hash);
CREATE INDEX IF NOT EXISTS idx_users_cluster_id ON users_master(cluster_id);


.mode csv
.headers on
.import "/Users/phoebekuek/Downloads/fake_tiktok_profiles_29r.csv" users_master


DELETE FROM users_master WHERE viewer_id = 'viewer_id';
DELETE FROM users_master WHERE viewer_id IS NULL OR TRIM(viewer_id) = '';


INSERT OR REPLACE INTO profiles_catalog (
  viewer_id, display_name, account_created_ts, age_days,
  geo_home_country, ip_country, device_hash, kyc_level,
  coins_per_transaction, num_transaction, avg_session_duration_secs,
  preferred_gift_type, cluster_id, profile_type
) VALUES (
  'U001', 'user001', '2025-08-11 22:08:54', 17,
  'SG', 'ID', 'DEV_5', 0,
  2000, 49, 41,
  'galaxy', 'cluster_B', 'bad'
);



-- Auto-score on INSERT into users_master
DROP TRIGGER IF EXISTS trg_users_ai_risk;
CREATE TRIGGER trg_users_ai_risk
AFTER INSERT ON users_master
BEGIN
  UPDATE users_master
  SET
    risk_label = CASE
      WHEN (
        (CASE WHEN ((NEW.num_transaction * NEW.coins_per_transaction) / (NULLIF(NEW.avg_session_duration_secs,0) / 60.0)) >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.cluster_id IS NOT NULL AND NEW.coins_per_transaction >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.device_hash IN (
             SELECT device_hash FROM users_master
             GROUP BY device_hash
             HAVING COUNT(DISTINCT viewer_id) >= 3
                AND SUM(num_transaction * coins_per_transaction) >= 1000
        ) THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.avg_session_duration_secs <= 30 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.age_days <= 7 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.kyc_level < 2 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END)
      ) >= 3.5 THEN 'High Risk'
      WHEN (
        (CASE WHEN ((NEW.num_transaction * NEW.coins_per_transaction) / (NULLIF(NEW.avg_session_duration_secs,0) / 60.0)) >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.cluster_id IS NOT NULL AND NEW.coins_per_transaction >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.device_hash IN (
             SELECT device_hash FROM users_master
             GROUP BY device_hash
             HAVING COUNT(DISTINCT viewer_id) >= 3
                AND SUM(num_transaction * coins_per_transaction) >= 1000
        ) THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.avg_session_duration_secs <= 30 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.age_days <= 7 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.kyc_level < 2 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END)
      ) >= 2.0 THEN 'Medium Risk'
      ELSE 'Low Risk'
    END,
    risk_score = CASE
      WHEN (
        (CASE WHEN ((NEW.num_transaction * NEW.coins_per_transaction) / (NULLIF(NEW.avg_session_duration_secs,0) / 60.0)) >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.cluster_id IS NOT NULL AND NEW.coins_per_transaction >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.device_hash IN (
             SELECT device_hash FROM users_master
             GROUP BY device_hash
             HAVING COUNT(DISTINCT viewer_id) >= 3
                AND SUM(num_transaction * coins_per_transaction) >= 1000
        ) THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.avg_session_duration_secs <= 30 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.age_days <= 7 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.kyc_level < 2 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END)
      ) >= 3.5 THEN 90.0
      WHEN (
        (CASE WHEN ((NEW.num_transaction * NEW.coins_per_transaction) / (NULLIF(NEW.avg_session_duration_secs,0) / 60.0)) >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.cluster_id IS NOT NULL AND NEW.coins_per_transaction >= 1000 THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.device_hash IN (
             SELECT device_hash FROM users_master
             GROUP BY device_hash
             HAVING COUNT(DISTINCT viewer_id) >= 3
                AND SUM(num_transaction * coins_per_transaction) >= 1000
        ) THEN 1.0 ELSE 0.0 END) +
        (CASE WHEN NEW.avg_session_duration_secs <= 30 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.age_days <= 7 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END) +
        (CASE WHEN NEW.kyc_level < 2 AND (NEW.num_transaction * NEW.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END)
      ) >= 2.0 THEN 60.0
      ELSE 20.0
    END
  WHERE rowid = NEW.rowid;
END;

-- Gift insert → copy full row from catalog → score
DROP TRIGGER IF EXISTS trg_gift_events_ai;
CREATE TRIGGER trg_gift_events_ai
AFTER INSERT ON gift_events
BEGIN
  INSERT INTO users_master (
    viewer_id, display_name, account_created_ts, age_days,
    geo_home_country, ip_country, device_hash, kyc_level,
    coins_per_transaction, num_transaction, avg_session_duration_secs,
    preferred_gift_type, cluster_id, profile_type
  )
  SELECT
    pc.viewer_id, pc.display_name, pc.account_created_ts, pc.age_days,
    pc.geo_home_country, pc.ip_country, pc.device_hash, pc.kyc_level,
    COALESCE(NEW.gift_coins, pc.coins_per_transaction),
    pc.num_transaction, pc.avg_session_duration_secs,
    COALESCE(NEW.gift_type, pc.preferred_gift_type),
    pc.cluster_id, pc.profile_type
  FROM profiles_catalog pc
  WHERE pc.viewer_id = NEW.viewer_id
  ON CONFLICT(viewer_id) DO UPDATE SET
    display_name = excluded.display_name,
    account_created_ts = excluded.account_created_ts,
    age_days = excluded.age_days,
    geo_home_country = excluded.geo_home_country,
    ip_country = excluded.ip_country,
    device_hash = excluded.device_hash,
    kyc_level = excluded.kyc_level,
    coins_per_transaction = excluded.coins_per_transaction,
    num_transaction = excluded.num_transaction,
    avg_session_duration_secs = excluded.avg_session_duration_secs,
    preferred_gift_type = excluded.preferred_gift_type,
    cluster_id = excluded.cluster_id,
    profile_type = excluded.profile_type;
END;


WITH scored AS (
  SELECT
    u.viewer_id,
    (
      CASE WHEN ( (u.num_transaction * u.coins_per_transaction) / (NULLIF(u.avg_session_duration_secs,0) / 60.0) ) >= 1000 THEN 1.0 ELSE 0.0 END +
      CASE WHEN u.cluster_id IS NOT NULL AND u.coins_per_transaction >= 1000 THEN 1.0 ELSE 0.0 END +
      CASE WHEN u.device_hash IN (
           SELECT device_hash FROM users_master
           GROUP BY device_hash
           HAVING COUNT(DISTINCT viewer_id) >= 3
              AND SUM(num_transaction * coins_per_transaction) >= 1000
      ) THEN 1.0 ELSE 0.0 END +
      CASE WHEN u.avg_session_duration_secs <= 30 AND (u.num_transaction * u.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END +
      CASE WHEN u.age_days <= 7 AND (u.num_transaction * u.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END +
      CASE WHEN u.kyc_level < 2 AND (u.num_transaction * u.coins_per_transaction) >= 1000 THEN 0.5 ELSE 0.0 END
    ) AS composite_sum
  FROM users_master u
),
labeled AS (
  SELECT
    s.viewer_id,
    CASE
      WHEN s.composite_sum >= 3.5 THEN 'High Risk'
      WHEN s.composite_sum >= 2.0 THEN 'Medium Risk'
      ELSE 'Low Risk'
    END AS risk_label
  FROM scored s
)
UPDATE users_master AS u
SET
  risk_label = (SELECT l.risk_label FROM labeled l WHERE l.viewer_id = u.viewer_id),
  risk_score = CASE (SELECT l.risk_label FROM labeled l WHERE l.viewer_id = u.viewer_id)
                 WHEN 'High Risk' THEN 90.0
                 WHEN 'Medium Risk' THEN 60.0
                 ELSE 20.0
               END;


.tables
SELECT COUNT(*) AS users_master_rows FROM users_master;   -- expect 29
SELECT COUNT(*) AS catalog_rows FROM profiles_catalog;    -- expect 1 (U001)
SELECT viewer_id, display_name, risk_label, risk_score
FROM users_master
ORDER BY risk_score DESC, viewer_id
LIMIT 5;


